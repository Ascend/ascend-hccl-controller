# Copyright Â© Huawei Technologies Co., Ltd. 2020. All rights reserved.
---
# This playbook is used to initialize the K8S cluster.
# Before running this script, ensure that Docker has been installed and the basic image of K8S has been imported.

- hosts: localnode, cluster
  remote_user: root

  tasks:
    - name: unset proxy
      shell:
        cmd:
          unset http_proxy https_proxy
      tags:
        - common
        - basic_only

# Init k8s cluster
- hosts: localnode, master
  remote_user: root
  vars:
    deploy_yaml_dir: "{{ dls_root_dir }}/yamls"

  tasks:
    - name: reset k8s
      shell:
        cmd:
          kubeadm reset -f;
          rm -rf /etc/cni/net.d /root/.kube/
      tags: init-master

    - name: Init cluster
      shell:
        cmd:
          unset http_proxy https_proxy;
          kubeadm init --kubernetes-version=v1.17.3
            --node-name={{ ansible_hostname }}
            --pod-network-cidr=192.168.0.0/16
            --apiserver-advertise-address={{ master_ip }}
      tags: init-master

    - name: Set kubernetes config file
      shell:
        cmd:
          mkdir -p $HOME/.kube;
          cp -i /etc/kubernetes/admin.conf $HOME/.kube/config;
          chown $(id -u):$(id -g) $HOME/.kube/config;
      tags: init-master

    # apply deploy/yaml/calico.yaml
    - name: Apply calico yaml file
      shell:
        chdir: "{{ deploy_yaml_dir }}"
        cmd:
          kubectl apply -f calico.yaml
      tags: init-master

    # use command: kubectl get pods -n kube-system
    # it's successful for releasing node if pod status is "Running"
    - name: Release master node quarantine
      shell:
        cmd:
          kubectl taint nodes --all node-role.kubernetes.io/master-
      tags: init-master

    # add kubeconfig file.  Replaces it if exists or add it if not exists.
    - name: Add kubeconfig file
      lineinfile:
        path: /etc/profile
        regexp: 'export KUBECONFIG(.*)=(.*)/etc'
        line: 'export KUBECONFIG=/etc/kubernetes/admin.conf'
      tags: init-master

    - name: Enable /etc/profile
      shell:
        cmd:
          source /etc/profile
      args:
        executable: "/bin/bash"
      tags: init-master

    - name: Label master node
      shell:
        cmd:
          unset http_proxy https_proxy;
          kubectl label nodes {{ ansible_hostname }} masterselector=dls-master-node --overwrite=true
      tags:
        - init-master
        - basic_only

# Register join cluster command
- hosts: master
  remote_user: root

  tasks:
    - name: Register join command
      shell:
        cmd:
          kubeadm token create --print-join-command
      register: join_command
      tags: init-workers

    - name: Set join facts
      add_host:
        name: "KUBERNETES_JOIN_COMMAND"
        join_command: "{{ join_command.stdout }}"
      tags: init-workers


# Add the worker node to the cluster and grant the Kubernetes administrator permission to the worker node.
- hosts: workers
  remote_user: root

  tasks:
    - name: reset k8s
      shell:
        cmd:
          kubeadm reset -f;
          rm -rf /etc/cni/net.d /root/.kube/
      tags: init-workers
      when:
        - ansible_default_ipv4['address'] != master_ip
      ignore_errors: True

    - name: Join into cluster
      shell:
        cmd:
          unset http_proxy https_proxy && {{ hostvars["KUBERNETES_JOIN_COMMAND"]["join_command"] }}
      tags: init-workers
      when:
        - ansible_default_ipv4['address'] != master_ip

# Labeling Work Nodes
- hosts: localnode, master
  remote_user: root

  tasks:
    - name: Label worker nodes
      shell:
        cmd:
          unset http_proxy https_proxy;
          kubectl label nodes {{ item }} node-role.kubernetes.io/worker=worker --overwrite=true;
          kubectl label nodes {{ item }} workerselector=dls-worker-node --overwrite=true;
      tags:
        - init-workers
        - basic_only
      with_items: "{{ groups['workers'] }}"

    - name: Label training nodes
      shell:
        cmd:
          unset http_proxy https_proxy;
          kubectl label nodes {{ item }} accelerator=huawei-Ascend910 --overwrite=true;
          kubectl label nodes {{ item }} accelerator-type- --overwrite=true
      tags:
        - init-workers
        - basic_only
      with_items: "{{ groups['training_node'] }}"

    - name: Label inference nodes
      shell:
        cmd:
          unset http_proxy https_proxy;
          kubectl label nodes {{ item }} accelerator=huawei-Ascend310 --overwrite=true
      tags:
        - init-workers
        - basic_only
      with_items: "{{ groups['inference_node'] }}"

    - name: Label A300I PRO nodes
      shell:
        cmd:
          unset http_proxy https_proxy;
          kubectl label nodes {{ item }} accelerator=huawei-Ascend710 --overwrite=true;
      tags:
        - init-workers
        - basic_only
      with_items: "{{ groups['A300I_PRO_node'] }}"

    - name: Label A300T nodes
      shell:
        cmd:
          unset http_proxy https_proxy;
          kubectl label nodes {{ item }} accelerator=huawei-Ascend910 --overwrite=true;
          kubectl label nodes {{ item }} accelerator-type=card --overwrite=true
      tags:
        - init-workers
        - basic_only
      with_items: "{{ groups['A300T_node'] }}"

    - name: Label arm nodes
      shell:
        cmd:
          unset http_proxy https_proxy;
          kubectl label nodes {{ item }} host-arch=huawei-arm --overwrite=true
      tags:
        - init-workers
        - basic_only
      with_items: "{{ groups['arm'] }}"

    - name: Label x86 nodes
      shell:
        cmd:
          unset http_proxy https_proxy;
          kubectl label nodes {{ item }} host-arch=huawei-x86 --overwrite=true
      tags:
        - init-workers
        - basic_only
      with_items: "{{ groups['x86'] }}"