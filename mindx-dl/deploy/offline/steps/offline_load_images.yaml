# Copyright ? Huawei Technologies Co., Ltd. 2020. All rights reserved.
---
# This playbook is used to load the Docker image offline.
# Before running the script, ensure that the required image list has been uploaded to the 'dls_root_dir' directory defined in /etc/ansible/hosts.

# Load docker images on master
- hosts: localnode, master
  remote_user: root
  vars_prompt:
  vars:
    docker_images_dir: "{{dls_root_dir}}/docker_images"

  tasks:
    - name: Load kubernetes basic images - arm64
      shell:
        chdir: "{{docker_images_dir}}"
        cmd:
          docker load < kube-apiserver_arm64.tar.gz;
          docker load < kube-controller-manager_arm64.tar.gz;
          docker load < kube-scheduler_arm64.tar.gz;
          docker load < kube-proxy_arm64.tar.gz;
          docker load < etcd_arm64.tar.gz;
          docker load < pause_arm64.tar.gz;
          docker load < coredns_arm64.tar.gz;
          docker load < calico-node_arm64.tar.gz;
          docker load < calico-pod2daemon-flexvol_arm64.tar.gz;
          docker load < calico-cni_arm64.tar.gz;
          docker load < calico-kube-controllers_arm64.tar.gz
      when: ansible_architecture == "aarch64"

    - name: Load kubernetes basic images - x86_64
      shell:
        chdir: "{{docker_images_dir}}"
        cmd:
          docker load < kube-apiserver_amd64.tar.gz;
          docker load < kube-controller-manager_amd64.tar.gz;
          docker load < kube-scheduler_amd64.tar.gz;
          docker load < kube-proxy_amd64.tar.gz;
          docker load < etcd_amd64.tar.gz;
          docker load < pause_amd64.tar.gz;
          docker load < coredns_amd64.tar.gz;
          docker load < calico-node_amd64.tar.gz;
          docker load < calico-pod2daemon-flexvol_amd64.tar.gz;
          docker load < calico-cni_amd64.tar.gz;
          docker load < calico-kube-controllers_amd64.tar.gz
      when: ansible_architecture == "x86_64"

    - name: Load mindx images
      shell:
        chdir: "{{docker_images_dir}}"
        cmd:
          docker load -i vc-webhook-manager-base*;
          docker load -i vc-controller-manager*;
          docker load -i vc-scheduler*;
          docker load -i vc-webhook-manager-v*;
          docker load -i hccl-controller*;
      tags: basic_only

- hosts: localnode
  remote_user: root
  vars:
    docker_images_dir: "{{dls_root_dir}}/docker_images"

  tasks:
    - name: Load mindx images
      shell:
        chdir: "{{docker_images_dir}}"
        cmd:
          docker load -i Ascend-K8sDevicePlugin*Docker*;
          docker load -i huawei-cadvisor-beta*;
      tags: basic_only

# Copy docker images to workers
- hosts: workers
  remote_user: root
  vars:
    docker_images_dir: "{{dls_root_dir}}/docker_images"

  tasks:
    - name: scp basic images from master to workers - arm64
      copy:
        src: "{{docker_images_dir}}/{{item}}"
        dest: "{{docker_images_dir}}/"
      with_items:
        - Ascend-K8sDevicePlugin-{{deviceplugin_version}}-arm64-Docker.tar.gz
        - huawei-cadvisor-beta-{{hccl_version}}-arm64.tar.gz
      tags: basic_only
      when: ansible_architecture == "aarch64"

    - name: scp basic images from master to workers - x86_64
      copy:
        src: "{{docker_images_dir}}/{{item}}"
        dest: "{{docker_images_dir}}/"
      with_items:
        - Ascend-K8sDevicePlugin-{{deviceplugin_version}}-x86-Docker.tar.gz
        - huawei-cadvisor-beta-{{hccl_version}}-amd64.tar.gz
      tags: basic_only
      when: ansible_architecture == "x86_64"

    - name: Load basic images - arm64
      shell:
        chdir: "{{docker_images_dir}}"
        cmd:
          docker load -i Ascend-K8sDevicePlugin*Docker*;
          docker load -i huawei-cadvisor-beta*;
      tags: basic_only
      when: ansible_architecture == "aarch64"

    - name: Load basic images - x86_64
      shell:
        chdir: "{{docker_images_dir}}"
        cmd:
          docker load -i Ascend-K8sDevicePlugin*Docker*;
          docker load -i huawei-cadvisor-beta*;
      tags: basic_only
      when: ansible_architecture == "x86_64"

    - name: scp additional images from master to workers - arm64
      copy:
        src: "{{docker_images_dir}}/{{item}}"
        dest: "{{docker_images_dir}}/"
      with_items:
        - kube-proxy_arm64.tar.gz
        - pause_arm64.tar.gz
        - calico-node_arm64.tar.gz
        - calico-pod2daemon-flexvol_arm64.tar.gz
        - calico-cni_arm64.tar.gz
        - calico-kube-controllers_arm64.tar.gz
      when: ansible_architecture == "aarch64"

    - name: scp additional images from master to workers - x86_64
      copy:
        src: "{{docker_images_dir}}/{{item}}"
        dest: "{{docker_images_dir}}/"
      with_items:
        - kube-proxy_amd64.tar.gz
        - pause_amd64.tar.gz
        - calico-node_amd64.tar.gz
        - calico-pod2daemon-flexvol_amd64.tar.gz
        - calico-cni_amd64.tar.gz
        - calico-kube-controllers_amd64.tar.gz
      when: ansible_architecture == "x86_64"

    - name: Load additional images - arm64
      shell:
        chdir: "{{docker_images_dir}}"
        cmd:
          docker load < kube-proxy_arm64.tar.gz;
          docker load < pause_arm64.tar.gz;
          docker load < calico-node_arm64.tar.gz;
          docker load < calico-pod2daemon-flexvol_arm64.tar.gz;
          docker load < calico-cni_arm64.tar.gz;
          docker load < calico-kube-controllers_arm64.tar.gz;
      when: ansible_architecture == "aarch64"

    - name: Load additional images - x86_64
      shell:
        chdir: "{{docker_images_dir}}"
        cmd:
          docker load < kube-proxy_amd64.tar.gz;
          docker load < pause_amd64.tar.gz;
          docker load < calico-node_amd64.tar.gz;
          docker load < calico-pod2daemon-flexvol_amd64.tar.gz;
          docker load < calico-cni_amd64.tar.gz;
          docker load < calico-kube-controllers_amd64.tar.gz;
      when: ansible_architecture == "x86_64"