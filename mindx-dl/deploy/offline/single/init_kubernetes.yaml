---
# This playbook is used to initialize the K8S cluster.
# Before running this script, ensure that Docker has been installed and the basic image of K8S has been imported.

- hosts: localnode
  remote_user: root
  vars:
    deploy_yaml_dir: "{{dls_root_dir}}/yaml"

  tasks:
    - name: unset proxy
      shell:
        cmd:
          unset http_proxy https_proxy
      tags: common

    - name: reset k8s
      shell:
        cmd:
          kubeadm reset -f;
          rm -rf /etc/cni/net.d /root/.kube/
      tags: init-master

    - name: Init cluster
      shell:
        cmd:
          kubeadm init --kubernetes-version=v1.17.3
            --node-name={{ansible_hostname}}
            --pod-network-cidr=192.168.0.0/16
            --apiserver-advertise-address={{ master_ip }}
      tags: init-master

    - name: Set kubernetes config file
      shell:
        cmd:
          mkdir -p $HOME/.kube;
          cp -i /etc/kubernetes/admin.conf $HOME/.kube/config;
          chown $(id -u):$(id -g) $HOME/.kube/config;
      tags: init-master

    - name: Modify calico yaml file
      lineinfile:
        dest: "{{deploy_yaml_dir}}/calico.yaml"
        insertbefore: '             - name: CALICO_IPV4POOL_CIDR'
        line: '             - name: IP_AUTODETECTION_METHOD
                                          value: "can-reach=10.174.217.94"'

    # apply deploy/yaml/calico.yaml
    - name: Apply calico yaml file
      shell:
        chdir: "{{deploy_yaml_dir}}"
        cmd:
          kubectl apply -f calico.yaml
      tags: init-master

    # use command: kubectl get pods -n kube-system
    # it's successful for releasing node if pod status is "Running"
    - name: Release master node quarantine
      shell:
        cmd:
          kubectl taint nodes --all node-role.kubernetes.io/master-
      tags: init-master

    # add kubeconfig file.  Replaces it if exists or add it if not exists.
    - name: Add kubeconfig file
      lineinfile:
        path: /etc/profile
        regexp: 'export KUBECONFIG(.*)=(.*)/etc'
        line: 'export KUBECONFIG=/etc/kubernetes/admin.conf'
      tags: init-master

    # find no_proxy var
    - name: register var
      shell: grep "export no_proxy" /etc/profile
      ignore_errors: True
      register: has_no_proxy_var
      tags: init-master

    # add when no_proxy exists
    - name: Set no proxy ip
      replace:
        path: /etc/profile
        regexp: '(export no_proxy)(.*)'
        replace: '\1\2,{{ master_ip }}'
      when: has_no_proxy_var.stdout != ""
      tags: init-master

    # create no_proxy when no_proxy exists
    - name: Add no proxy ip
      lineinfile:
        path: /etc/profile
        line: 'export no_proxy={{ master_ip }}'
      when: has_no_proxy_var.stdout == ""
      tags: init-master

    - name: Enable /etc/profile
      shell:
        cmd:
          source /etc/profile
      args:
        executable: "/bin/bash"
      tags: init-master

    - name: Label node
      shell:
        cmd:
          kubectl label nodes {{ansible_hostname}} masterselector=dls-master-node;
          kubectl label nodes {{ansible_hostname}} node-role.kubernetes.io/worker=worker;
          kubectl label nodes {{ansible_hostname}} workerselector=dls-worker-node --overwrite=true;
          kubectl label nodes {{ansible_hostname}} accelerator=huawei-Ascend910 --overwrite=true
      tags: init-master

    - name: Label arm nodes
      shell:
        cmd:
          kubectl label nodes {{ansible_hostname}} host-arch=huawei-arm --overwrite=true
      tags: init-workers
      when: ansible_architecture == "aarch64"

    - name: Label x86 nodes
      shell:
        cmd:
          kubectl label nodes {{ansible_hostname}} host-arch=huawei-x86 --overwrite=true
      tags: init-workers
      when: ansible_architecture == "x86_64"
